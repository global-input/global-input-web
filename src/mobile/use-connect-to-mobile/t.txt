import React, { useState, useCallback, useEffect, useRef } from 'react';
import { useHistory } from 'react-router-dom';
import styled from 'styled-components';
import * as globalInput from 'global-input-react';////global-input-react////


////main////
import * as storage from '../../storage';

import { DisplayConnectQRCode, DisplaySettingsEditor, DisplayParing } from './popupWindow';
import appIcon from './images/app-icon.png';
import closeIcon from './images/close.png';
import settingsIcon from './images/settings.png';


const PopupContainer = styled.div`
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100%;
        margin: 0;
        padding: 0;
        position: fixed;
        top: 90px;
        left: 0;
`;

const PopupWindow = styled.div`
        flex-direction: column;
        justify-content: flex-center;
        align-items: flex-start;
        background-color: white;
        margin: 0;
        padding:0;
        border: 3px solid #f1f1f1;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
        display: flex;
        min-width: 350px;
        min-height: 350px;

`;
const ErrorMessage = styled.div`
        color: red;
        font-size: 11;
        padding-left: 10px;
        padding-right: 10px;
        padding-bottom: 10px;
        max-width:  350px;
        max-height: 100px;
        overflow: scroll;
`;

const TopBar = styled.div`
        display: flex;
        margin:0;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
        flex-direction: row;
        justify-content: space-between;
        width: 100%;
        align-items: center;
        padding-left:10px;
        padding-right:10px;
        padding-bottom:10px;
        padding: 10px;
        background: #f1f1f1;
`;
const PopupBody = styled.div`
        flex-direction: column;
        justify-content: flex-center;
        align-items: flex-start;
        margin: 0;
        padding:0;
        display: ${props => props.show ? 'flex' : 'none'};
`;



const Button = styled.button`
    text-decoration: none;
    font-size: 11px;
    border-radius: 4px;
    color: #4281BD;
    background-color: white;
    white-space: nowrap;
    padding: 5px;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    border-color:#EEEEEE;
    margin-left:20px;
    display:flex;
    visibility: ${props => props.hide ? 'hidden' : 'visible'};
`;

const Image = styled.img`
    margin-right: 5px;
`;




const LeftButtonContainer = styled.div`
    min-width: 50px;
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    align-items: center;
`;


const Field = styled.div`
    position: relative;
    margin: 20px auto;
`;
const Input = styled.input`
    display: block;
    line-height: 2em;
    margin: 0;
    padding-left: 10px;
    width: 100%;
    font-size: medium;
    border: 1px solid #f4f4f4;
    background-color: #f4f4f4;
    border-radius: 5px;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    font-weight: 500;
    &:focus {
        border: 1px solid #2c7ac9;
    }
    &:placeholder-shown + .control-label {
        visibility: hidden;
        z-index: -1;
        transition: 0.2s ease-in-out;

    }
    &:not(:placeholder-shown) + .control-label,
    .form-control:focus:not(:placeholder-shown) + .control-label {
        visibility: visible;
        z-index: 1;
        opacity: 1;
        transform: translateY(-5px);
        transition: 0.2s ease-in-out transform;
    }

`;
const Label = styled.label.attrs(props => ({
    className: "control-label"

}))`
    display: block;
    position: absolute;
    opacity: 0;
    bottom: 1.9rem;
    color: #5d5d5d;
    transition: 0.2s ease-in-out transform;
    font-size: 12px;
`;



export const useConnectToMobile = (initData: globalInput.InitData | (() => globalInput.InitData), onFieldChange: (field: globalInput.FormField, history) => void) => {
    const [connect, setConnect] = useState(false);
    const history = useHistory();
    const connectionSettings = storage.loadConnectionSettings();
    const options: globalInput.ConnectOptions = {
        url: connectionSettings.url,////use your own server"
        apikey: connectionSettings.apikey,
        securityGroup: connectionSettings.securityGroup
    };
    const mobile = globalInput.useGlobalInputApp({
        initData, options, codeAES: connectionSettings.codeKey
    }, connect);
    ////dev-test codeData

    const enableConnect = useCallback(() => setConnect(true), []);
    const disableConnect = useCallback(() => setConnect(false), []);
    const editSettings = useCallback(() => setPage(PAGES.SETTINGS), []);


    mobile.setOnchange(({ field }) => {
        onFieldChange && onFieldChange(field, history);
    });

    const { ConnectQR } = mobile;
    let errorMessage = mobile.isConnectionDenied && "You can only use one mobile app per session. Disconnect to start a new session.";
    if (mobile.isError) {
        errorMessage = mobile.errorMessage;
    }
    const DisplayMobileConnect = () => {

        const qrcodeWindow = useRef(null);
        const onOutsideClicked = useCallback(() => {
            if (page === PAGES.HOME) {
                disableConnect();
            }

        }, []);
        useClickedOutside(qrcodeWindow, onOutsideClicked);

        if ((!connect) && (!mobile.isConnected)) {
            return (<Button onClick={enableConnect}>
                <Image src={appIcon} alt="global input app icon" />
                    Demo
            </Button>);
        }
        else {
            return (
                <PopupContainer>
                    <PopupWindow ref={qrcodeWindow}>
                        <TopBar>
                            <Button onClick={editSettings} hide={page !== PAGES.HOME}>
                                <Image src={settingsIcon} alt="Settings" />
                                Settings</Button>
                            <LeftButtonContainer>
                                <Button onClick={disableConnect}>
                                    <Image src={closeIcon} alt="Close" />
                            Close</Button>
                            </LeftButtonContainer>
                        </TopBar>
                        <PopupBody show={page === PAGES.HOME}>
                            <ConnectQR />
                            <ErrorMessage>{errorMessage}</ErrorMessage>
                        </PopupBody>
                        <PopupBody show={page === PAGES.SETTINGS}>
                            <Field>
                                <Input id="proxyURL" placeholder="Proxy URL" />
                                <Label htmlFor="proxyURL">Proxy URL</Label>
                            </Field>


                        </PopupBody>


                    </PopupWindow>
                </PopupContainer>
            );
        }
    };
    return { DisplayMobileConnect };
};

const useClickedOutside = (element, onClicked) => {
    useEffect(() => {
        const handleClick = (evt) => {
            if (element.current && (!element.current.contains(evt.target))) {
                onClicked();
            }
        }
        document.addEventListener('click', handleClick);
        return () => {
            document.removeEventListener('click', handleClick);
        }
    }, [onClicked, element]);
}


enum PAGES {
    DISPLAY_CONNECT_QR,
    SETTINGS,
    PAIRED
}

const DisplayConnectMobile = () => {
    const [page, setPage] = useState(PAGES.DISPLAY_CONNECT_QR);
    switch (page) {
        case PAGES.DISPLAY_CONNECT_QR:
            return (<DisplayConnectQRCode />);
        case PAGES.DISPLAY_SE
        DisplayConnectQRCode, DisplaySettingsEditor, DisplayParing
    }


}